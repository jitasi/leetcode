// Runtime: 348 ms, faster than 53.44% of C++ online submissions for Reverse
// Pairs. Memory Usage: 77.1 MB, less than 24.70% of C++ online submissions for
// Reverse Pairs.
​
    // https://leetcode.com/problems/reverse-pairs/discuss/97268/general-principles-behind-problems-similar-to-reverse-pairs
    ​ class Solution {
 public:
   int reversePairs(vector<int> &nums) {
       return reversePairs(nums, 0, nums.size());
  }
   
  int reversePairs(vector<int> &nums, int l, int r) {
       if (r - l <= 1) return 0;
       const int m = l + (r - l) / 2;
       int cnt = reversePairs(nums, l, m) + reversePairs(nums, m, r);
       
    vector<int> sorted(r - l);
       int idx_in_sorted = 0;
       int idx_right_to_sort = m;
       int idx_right = m;
       for (int i = l; i < m; i++) {
           while (idx_right < r && nums[i] > 2L * nums[idx_right]) idx_right++;
           cnt += idx_right - m;
           
      while (idx_right_to_sort < r && nums[i] >= nums[idx_right_to_sort]) 
        sorted[idx_in_sorted++] = nums[idx_right_to_sort++];
           sorted[idx_in_sorted++] = nums[i];
       
    }
       std::copy(sorted.begin(), sorted.begin() + idx_in_sorted,
                 nums.begin() + l);
       
    return cnt;
  }
   
/*
  void update(vector<int>& bit, int pos, int val) {
    for (; pos < bit.size(); pos += pos & (-pos))
      bit[pos] += val;
  }
