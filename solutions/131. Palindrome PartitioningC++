// Runtime: 8 ms, faster than 99.83% of C++ online submissions for Palindrome Partitioning.
// Memory Usage: 13 MB, less than 80.56% of C++ online submissions for Palindrome Partitioning.

class Solution {
public:
    void work(const string& s, int from, int to, vector<string>& prefix,
              vector<vector<string>>& ans, vector<vector<bool>>& dp) {
      if (from > to) return;
        
      for (int i = from; i <= to; i++) {
        if (dp[from][i]) {
          prefix.push_back(s.substr(from, i - from + 1));
          if (i == to) ans.push_back(prefix);
          else work(s, i + 1, to, prefix, ans, dp);
          prefix.pop_back();
        }
      }
    }
    
    vector<vector<string>> partition(string s) {
      const int len = s.size();
      if (len == 0) return {};
      else if (len == 1) return {{s}};
      
      vector<vector<bool>> dp(len, vector<bool>(len, false));
      for (int i = 0; i < len; i++)
        dp[i][i] = true;
      for (int i = 0; i < len - 1 ; i++)
        dp[i][i+1] = s[i] == s[i + 1];
      for (int l = 2; l < len; l++) {
        for (int i = 0; i < len - l; i++) {
          const int j = i + l;
          dp[i][j] = (s[i] == s[j]) && dp[i + 1][j - 1];
        }
      }
/*      
      for (int i = 0; i < len; i++) {
        for (int j = 0; j < len; j++) {
          cout << dp[i][j] << ", ";
        }
        cout << endl;
      }
*/      
      vector<vector<string>> ans;
      vector<string> prefix;
      work(s, 0, len - 1, prefix, ans, dp);
      return ans;
    }
};