class MedianFinder {
 public:
  /** initialize your data structure here. */
  // half of the samll numbers, pop up max first.
  priority_queue<int, vector<int>, less<int>> min_heap;
  // half of the large numbers, pop up min first.
  priority_queue<int, vector<int>, greater<int>> max_heap;
  MedianFinder() {}

  void addNum(int num) {
    if (!max_heap.empty() && max_heap.top() < num) {
      max_heap.push(num);
    } else {
      min_heap.push(num);
    }

    if (min_heap.size() < max_heap.size()) {
      min_heap.push(max_heap.top());
      max_heap.pop();
    } else if (min_heap.size() - 1 > max_heap.size()) {
      max_heap.push(min_heap.top());
      min_heap.pop();
    }
  }

  double findMedian() {
    if (min_heap.size() > max_heap.size()) return min_heap.top();
    return (min_heap.top() + max_heap.top()) / 2.0;
  }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */