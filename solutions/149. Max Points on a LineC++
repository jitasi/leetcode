// Runtime: 12 ms, faster than 96.93% of C++ online submissions for Max Points
// on a Line. Memory Usage: 10.5 MB, less than 56.10% of C++ online submissions
// for Max Points on a Line.

class Solution {
public:
  void simplify(int &a, int &b) {
    if (a == 0) {
      b = 1;
      return;
    }
    if (b == 0) {
      a = 1;
      return;
    }
    int net = (((a > 0) && (b < 0)) || ((a < 0) && (b > 0))) ? -1 : 1;
    a = abs(a);
    b = abs(b);
    int x = max(a, b);
    int y = min(a, b);
    while (y != 0) {
      x = x % y;
      swap(x, y);
    }
    a /= x;
    b /= x;
    b *= net;
  }

  int maxPoints(vector<vector<int>> &points) {
    if (points.size() <= 1)
      return points.size();

    unordered_map<long, int> slope_pairs;

    int diff_x, diff_y;
    long s;
    int ans = 0;
    int overlap_pts;
    for (int i = 0; i < points.size() - 1; i++) {
      slope_pairs.clear();
      overlap_pts = 1;
      for (int j = i + 1; j < points.size(); j++) {
        diff_x = points[i][0] - points[j][0];
        diff_y = points[i][1] - points[j][1];
        if (diff_x == 0 && diff_y == 0) {
          overlap_pts++;
          continue;
        }
        simplify(diff_x, diff_y);
        s = (unsigned int)diff_y;
        s <<= 32;
        s |= diff_x;
        if (slope_pairs.count(s) > 0)
          slope_pairs[s]++;
        else
          slope_pairs[s] = 1;
      }
      for (const auto &kv : slope_pairs) {
        ans = max(kv.second + overlap_pts, ans);
      }
      ans = max(overlap_pts, ans);
    }

    return ans;
  }
};