class Solution {
 public:
  unordered_map<string, unordered_map<string, double>> m;

  double evaluate(vector<string> query) {
    stack<pair<string, double>> s;
    s.push({query[0], 1.0});
    unordered_set<string> visited = {query[0]};

    while (!s.empty()) {
      const auto cur = s.top();
      s.pop();
      for (const auto kv : m[cur.first]) {
        if (kv.first == query[1]) {
          return cur.second * kv.second;
        }
        if (visited.count(kv.first)) continue;
        s.push({kv.first, cur.second * kv.second});
        visited.insert(kv.first);
      }
    }
    return -1.0;
  }

  vector<double> calcEquation(vector<vector<string>> &equations,
                              vector<double> &values,
                              vector<vector<string>> &queries) {
    for (int i = 0; i < equations.size(); i++) {
      if (m.count(equations[i][0]) == 0) {
        m[equations[i][0]] = {{equations[i][1], values[i]}};
      } else {
        m[equations[i][0]].insert({equations[i][1], values[i]});
      }
      if (m.count(equations[i][1]) == 0) {
        m[equations[i][1]] = {{equations[i][0], 1.0 / values[i]}};
      } else {
        m[equations[i][1]].insert({equations[i][0], 1.0 / values[i]});
      }
    }

    vector<double> ans;
    for (const auto q : queries) {
      if (m.count(q[0]) == 0 || m.count(q[1]) == 0)
        ans.push_back(-1);
      else if (q[0] == q[1])
        ans.push_back(1.0);
      else
        ans.push_back(evaluate(q));
    }
    return ans;
  }
};