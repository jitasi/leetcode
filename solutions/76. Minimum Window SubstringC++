// Runtime: 80 ms, faster than 9.80% of C++ online submissions for Minimum
// Window Substring. Memory Usage: 10.6 MB, less than 34.77% of C++ online
// submissions for Minimum W

class Solution {
public:
  string minWindow(string s, string t) {
    if (t.empty() || s.empty())
      return "";

    const int len = s.size();
    if (len < t.size())
      return "";

    int pattern_chars = 0;
    unordered_map<char, int> pattern_cnts;
    for (const char ch : t) {
      if (pattern_cnts.count(ch) == 0)
        pattern_chars++;
      pattern_cnts[ch]++;
    }

    int ans_len = len + 1;
    string ans_str = "";

    int start = 0;
    int window_chars = 0;
    unordered_map<char, int> window_cnts;
    for (int end = 0; end < len; end++) {
      const char ch = s[end];
      if (pattern_cnts.count(ch) == 0)
        continue;

      if (window_cnts[ch] == 0)
        window_chars++;
      window_cnts[ch]++;

      if (window_chars != pattern_chars)
        continue;

      bool match = true;
      for (const auto kv : window_cnts) {
        if (kv.second < pattern_cnts[kv.first]) {
          match = false;
          break;
        }
      }
      if (!match)
        continue;

      for (; start <= end; start++) {
        const char ch = s[start];
        if (pattern_cnts.count(ch) == 0)
          continue;

        if (window_cnts[ch] > pattern_cnts[ch]) {
          window_cnts[ch]--;
          continue;
        }

        const int cur_len = end - start + 1;
        if (ans_len > cur_len) {
          ans_len = cur_len;
          ans_str = s.substr(start, end - start + 1);
        }

        window_cnts[ch]--;
        if (window_cnts[ch] == 0)
          window_chars--;
        start++;
        break;
      }
    }

    return ans_str;
  }
};