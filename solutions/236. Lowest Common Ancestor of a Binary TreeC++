/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    pair<TreeNode*, int> work(TreeNode* root, TreeNode* p, TreeNode* q) {
      if (root == nullptr) {
        return {nullptr, 0};
      } 
      
      auto left_ret = work(root->left, p, q);
      auto right_ret = work(root->right, p, q);
      if (left_ret.first != nullptr) return left_ret;
      else if (right_ret.first != nullptr) return right_ret;
      
      int existing = 0;
      if (root->val == p->val) {
        existing = 1;
      } else if (root->val == q->val) {
        existing = 2;
      }    
      existing += left_ret.second + right_ret.second;
      if (existing == 3) return {root, 3};
      return {nullptr, existing};
    }
  
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
      return work(root, p, q).first;
    }
};