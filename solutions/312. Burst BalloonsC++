class Solution {
public:
    int maxCoins(vector<int>& nums) {
      // nums    0 1 2 3 4 5 6 7     len = 8
      // dp    0 1 2 3 4 5 6 7 8 9   dp_len = 10
      //           i         j       l = j - i
      // so l = 2 to len + 1
      const int len = nums.size();
      if (len <= 0) return 0; 
      if (len == 1) return nums[0];
      
      vector<vector<int>> dp(len + 2, vector<int>(len + 2, 0));

      for (int l = 2; l <= len + 1; l++) {
//        cout << "l = " << l << " ==> ";
        for (int i = 0; i <= len - l + 1; i++) {
          const int j = i + l;
          for (int k = i + 1; k <= j - 1; k++) {
            const int t = dp[i][k] + dp[k][j] 
              + (i > 0? nums[i - 1] : 1) * nums[k - 1] * (j <= len? nums[j - 1] : 1);
            if (t > dp[i][j]) dp[i][j] = t;
          }
//          cout << dp[i][j] << ", ";
        }
//        cout << endl;
      }
      
      return dp[0][len + 1];
    }
};