
class Solution {
 public:
  bool valid(int n, int *st, int cur, int c) {
    for (int i = 0; i < cur; i++) {
      if (st[i] == c) return false;
      if (cur - i == abs(c - st[i])) return false;
    }
    return true;
  }

  void solve(int n, vector<vector<string>> &ans, int *st, int cur) {
    if (cur == n) {
      vector<string> sol;
      for (int p = 0; p < n; p++) {
        string row;
        int i = 0;
        for (; i < st[p]; i++) {
          row += ".";
        }
        row += "Q";
        for (i++; i < n; i++) {
          row += ".";
        }
        sol.push_back(row);
      }
      ans.push_back(sol);
      return;
    }

    for (int i = 0; i < n; i++) {
      if (valid(n, st, cur, i)) {
        st[cur] = i;
        solve(n, ans, st, cur + 1);
      }
    }
  }

  vector<vector<string>> solveNQueens(int n) {
    if (n == 0) return {};
    vector<vector<string>> ans;
    int st[n];
    solve(n, ans, st, 0);
    return ans;
  }
};