/ class Solution {
 public:
  vector<int> fallingSquares(vector<vector<int>> &positions) {
    const int len = positions.size();
    if (len == 0) return {};

    vector<int> pos(2 * len);
    for (int i = 0; i < len; i++) {
      pos[2 * i] = positions[i][0];
      pos[2 * i + 1] = positions[i][0] + positions[i][1];
    }
    sort(pos.begin(), pos.end());

    //     [[1, 2], [2, 3], [6, 1]]
    // pos 1 2 3 5 6 7
    // h . X X X X X
    int max_h = 0;
    vector<int> h(2 * len);
    vector<int> ans(len);
    for (int i = 0; i < len; i++) {
      const auto it_s = lower_bound(pos.begin(), pos.end(), positions[i][0]);
      const int idx_s = distance(pos.begin(), it_s);
      int local_h = 0;
      for (int idx = idx_s; pos[idx] < positions[i][0] + positions[i][1];
           idx++) {
        local_h = max(local_h, h[idx]);
      }
      local_h += positions[i][1];
      for (int idx = idx_s; pos[idx] < positions[i][0] + positions[i][1];
           idx++) {
        h[idx] = local_h;
      }

      max_h = max(max_h, local_h);
      ans[i] = max_h;
    }
    return ans;
  }
};