// Runtime: 24 ms, faster than 59.75% of C++ online submissions for Unique
// Binary Search Trees II. Memory Usage: 16.6 MB, less than 68.93% of C++ online
// submissions for Unique Binary Search Trees II.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  vector<TreeNode *> helper(int start, int end) {
    if (start == end) {
      return {new TreeNode(start)};
    }
    if (start > end) {
      return {nullptr};
    }

    vector<TreeNode *> ans;
    for (int i = start; i <= end; i++) {
      vector<TreeNode *> left = helper(start, i - 1);
      vector<TreeNode *> right = helper(i + 1, end);

      for (auto *l : left) {
        for (auto *r : right) {
          TreeNode *root = new TreeNode(i);
          root->left = l;
          root->right = r;
          ans.push_back(root);
        }
      }
    }
    return ans;
  }

  vector<TreeNode *> generateTrees(int n) {
    if (n == 0)
      return {};
    return helper(1, n);
  }
};