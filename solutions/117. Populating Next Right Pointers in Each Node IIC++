// Runtime: 392 ms, faster than 92.37% of C++ online submissions for Populating
// Next Right Pointers in Each Node II. Memory Usage: 66.7 MB, less than 64.34%
// of C++ online submissions for Populating Next Right Pointers in Each Node II.

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() {}

    Node(int _val, Node* _left, Node* _right, Node* _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
public:
  Node *connect(Node *root) {
    if (root == nullptr)
      return nullptr;

    root->next = nullptr;
    if (root->right == nullptr && root->left == nullptr)
      return root;

    if (root->left != nullptr)
      root->left->next = root->right;
    if (root->right != nullptr)
      root->right->next = nullptr;

    work(root->right);
    work(root->left);
    return root;
  }

  void work(Node *root) {
    if (root == nullptr)
      return;

    if (root->right == nullptr && root->left == nullptr)
      return;

    if (root->right != nullptr && root->left != nullptr) {
      root->left->next = root->right;
      //        cout << root->left->val << " --> " << root->left->next->val <<
      //        endl;
    }

    // find next
    Node *tmp = root;
    while (tmp->next != nullptr && tmp->next->left == nullptr &&
           tmp->next->right == nullptr) {
      tmp = tmp->next;
    }
    tmp = tmp->next;
    if (tmp == nullptr)
      ;
    else if (tmp->left != nullptr)
      tmp = tmp->left;
    else
      tmp = tmp->right;
    if (root->right != nullptr) {
      root->right->next = tmp;
      //        cout << root->right->val << " --> " << ((root->right->next ==
      //        nullptr)? 0 : root->right->next->val) << endl;
    } else {
      root->left->next = tmp;
      //        cout << root->left->val << " --> " << ((root->left->next ==
      //        nullptr)? 0 : root->left->next->val) << endl;
    }

    work(root->right);
    work(root->left);
  }
};