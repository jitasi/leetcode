// Runtime: 44 ms, faster than 95.77% of C++ online submissions for Interval
// List Intersections. Memory Usage: 16.1 MB, less than 7.54% of C++ online
// submissions for Interval List Intersections.

class Solution {
 public:
  vector<vector<int>> intervalIntersection(vector<vector<int>> &A,
                                           vector<vector<int>> &B) {
    vector<vector<int>> ans;
    vector<int> last = {-1, -1};
    const int len_a = A.size();
    const int len_b = B.size();
    int cur_a = 0;
    int cur_b = 0;
    while (cur_a < len_a || cur_b < len_b) {
      vector<int> *cur;
      if (cur_b >= len_b || (cur_a < len_a && A[cur_a][0] < B[cur_b][0])) {
        cur = &A[cur_a];
        cur_a++;
      } else {
        cur = &B[cur_b];
        cur_b++;
      }

      // if not overlap with intervals in s.
      // . ==> clear stack
      // . ==> insert current interval to stack.
      if (last[1] < (*cur)[0]) {
        last = *cur;
        continue;
      }

      // Otherwise,
      int a = max(last[0], (*cur)[0]);
      int b = min(last[1], (*cur)[1]);
      ans.push_back({a, b});
      if (last[1] < (*cur)[1]) {
        last = *cur;
      }
    }
    return ans;
  }
};