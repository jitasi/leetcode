// Runtime: 28 ms, faster than 75.83% of C++ online submissions for Range Sum
// Query 2D - Immutable. Memory Usage: 16.3 MB, less than 99.87% of C++ online
// submissions for Range Sum Query 2D - Immutable.
​ class NumMatrix {
 public:
   vector<vector<int>> sums;
   
  NumMatrix(vector<vector<int>> &matrix) {
       sums.swap(matrix);
       if (sums.size() == 0 || sums[0].size() == 0) return;
       
    for (int i = 0; i < sums.size(); i++)
      for (int j = 1; j < sums[0].size(); j++)
        sums[i][j] += sums[i][j - 1];
       
    for (int j = 0; j < sums[0].size(); j++)
      for (int i = 1; i < sums.size(); i++)
        sums[i][j] += sums[i - 1][j];
  }
     
  int sumRegion(int row1, int col1, int row2, int col2) {
       return sums[row2][col2] - (col1 > 0 ? sums[row2][col1 - 1] : 0) 
        - (row1 > 0 ? sums[row1 - 1][col2] : 0) +
        (row1 > 0 && col1 > 0 ? sums[row1 - 1][col1 - 1] : 0);
  }
};
​
    /**
     * Your NumMatrix object will be instantiated and called as such:
     * NumMatrix* obj = new NumMatrix(matrix);
     * int param_1 = obj->sumRegion(row1,col1,row2,col2);
     */
