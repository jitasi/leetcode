class Solution {
public:
  bool isMatch(string s, string p) {
    if (s.empty() && p.empty())
      return true;

    const int len_s = s.size();
    const int len_p = p.size();
    bool dp[len_s + 1][len_p + 1];

    char last;
    for (int i = 0; i <= len_s; i++) {
      last = 0;
      dp[i][0] = (i == 0);
      for (int j = 1; j <= len_p; j++) {
        dp[i][j] = false;
        // match xy => xy or x.
        if (i >= 1 && dp[i - 1][j - 1] &&
            (p[j - 1] == '.' || s[i - 1] == p[j - 1])) {
          dp[i][j] = true;
        }
        if (p[j - 1] != '*') {
          last = p[j - 1];
        } else {
          // match x => x*
          if (dp[i][j - 1])
            dp[i][j] = true;
          // match xx => x*
          // match xxx => x*, xxxx => x*
          else if (i >= 1 && (dp[i - 1][j - 1] || dp[i - 1][j]) &&
                   (last == '.' || last == s[i - 1]))
            dp[i][j] = true;
          // match '' => x*
          else if (j >= 2 && dp[i][j - 2])
            dp[i][j] = true;
        }
        //          cout << i << "," << j << "==>" << dp[i][j] << endl;
      }
    }

    return dp[len_s][len_p];
  }
};