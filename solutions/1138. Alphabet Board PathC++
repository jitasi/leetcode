/* vim: set ft=cpp : */
​
// Runtime: 0 ms, faster than 100.00% of C++ online submissions for Alphabet Board Path.
// Memory Usage: 8.6 MB, less than 100.00% of C++ online submissions for Alphabet Board Path.
​
class Solution {
public:
  const vector<string> board = {"abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"};
  
  string alphabetBoardPath(string target) {
    unordered_map<char, pair<int, int>> m;
    for (int i = 0; i < board.size(); i++)
      for (int j = 0; j < board[i].size(); j++)
        m[board[i][j]] = {i, j};
​
    string ans;
    int x = 0, y = 0;
    string x_ans;
    string y_ans;
    for (const char ch: target) {
      const auto& [n_x, n_y] = m[ch];
      const int x_diff = x - n_x;
      const int y_diff = y - n_y;
      
      if (x_diff > 0) x_ans = string(x_diff, 'U');
      else if (x_diff < 0) x_ans = string(-x_diff, 'D');
      else x_ans = "";
      
      if (y_diff > 0) y_ans = string(y_diff, 'L');
      else if (y_diff < 0) y_ans = string(-y_diff, 'R');  
      else y_ans = "";
      
      if (ch == 'z') ans += y_ans + x_ans;
      else ans += x_ans + y_ans;
      ans += string(1, '!');
      x = n_x;
      y = n_y;
    }
    return ans;
  }
};
