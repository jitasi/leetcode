// Runtime: 44 ms, faster than 41.63% of C++ online submissions for Count of Range Sum.
// Memory Usage: 26.8 MB, less than 7.31% of C++ online submissions for Count of Range Sum.
​
class Solution {
public:
  int countRangeSum(vector<int>& nums, int lower, int upper) {
    vector<long> sums(nums.size() + 1, 0L);
    for (int i = 0; i < nums.size(); i++) sums[i + 1] = sums[i] + nums[i];
    
    return mergeAndCount(sums, 0, sums.size(), lower, upper);
  }
​
  int mergeAndCount(vector<long>& sums, int l, int r, int lower, int upper) {
    if (r - l <= 1) return 0;
    const int m = l + (r - l) / 2;
    int cnt = mergeAndCount(sums, l, m, lower, upper)
        + mergeAndCount(sums, m, r, lower, upper);
//    cout << l << ", " << r << endl;  
    
    int idx_lower = m;  // the idx in the second part that sum[idx_lower] - sum[i] > lower
    int idx_upper = m;
    int idx_sort = m;
    vector<long> sorted(r - l);
    int idx_in_sorted = 0;
    for (int i = l; i < m; i++) {
      while(idx_lower < r && sums[idx_lower] - sums[i] < lower) idx_lower++;
//      cout << idx_lower << ", ";
      while(idx_upper < r && sums[idx_upper] - sums[i] <= upper) idx_upper++;
//      cout << idx_upper << ", ";
      while(idx_sort < r && sums[idx_sort] < sums[i]) sorted[idx_in_sorted++] = sums[idx_sort++];
//      cout << idx_sort << ", ";
//      cout << idx_in_sorted << ", ";
      sorted[idx_in_sorted++] = sums[i];
      cnt += idx_upper - idx_lower;
    }
    std::copy(sorted.begin(), sorted.begin() + idx_in_sorted, sums.begin() + l);
    std::copy(sums.begin() + idx_sort, sums.begin() + r, sums.begin() + l + idx_in_sorted);
//    cout << " cnt= " << cnt << endl;
    return cnt;
  }
};
