/* vim: set ft=cpp : */
​
// Runtime: 48 ms, faster than 79.87% of C++ online submissions for Car Fleet.
// Memory Usage: 10.6 MB, less than 98.89% of C++ online submissions for Car Fleet.
​
class Solution {
public:
  int carFleet(int target, vector<int>& position, vector<int>& speed) {
    const int num_cars = position.size();
    if (num_cars == 0) return 0;
    
    vector<float> t(num_cars);  // t: time to target.
    vector<int> idx(num_cars);  // idx: sorted by distance to target, fartest comes first
    for (int i = 0; i < num_cars; i++) {
      t[i] = (target - position[i]) * 1.0f / speed[i];
      idx[i] = i;
    }    
    sort(idx.begin(), idx.end(), [&position](int a, int b){
      return position[a] < position[b];
    });
    
    int ans = 1;
    float next_t = t[idx[num_cars - 1]];
    for (int i = num_cars - 1; i >= 0; i--) {
      if (next_t < t[idx[i]]) {
        ans++;
        next_t = t[idx[i]];
      }
    }
    return ans;
  }
};
