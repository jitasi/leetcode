class Solution {
 public:
  vector<int> maxSumOfThreeSubarrays(vector<int> &nums, int k) {
    const int len = nums.size();
    int part_sum[len];
    part_sum[0] = 0;
    for (int i = 0; i < k; i++) part_sum[0] += nums[i];
    for (int i = 1; i < len - k + 1; i++)
      part_sum[i] = part_sum[i - 1] + nums[i + k - 1] - nums[i - 1];

    int left_max[len];
    int left_max_idx[len];
    left_max[0] = part_sum[0];
    left_max_idx[0] = 0;
    for (int i = 1; i <= len - k; i++) {
      if (part_sum[i] > left_max[i - 1]) {
        left_max[i] = part_sum[i];
        left_max_idx[i] = i;
      } else {
        left_max[i] = left_max[i - 1];
        left_max_idx[i] = left_max_idx[i - 1];
      }
    }

    int right_max[len];
    int right_max_idx[len];
    right_max[len - k] = part_sum[len - k];
    right_max_idx[len - k] = len - k;
    for (int i = len - k - 1; i >= 0; i--) {
      if (part_sum[i] >= right_max[i + 1]) {
        right_max[i] = part_sum[i];
        right_max_idx[i] = i;
      } else {
        right_max[i] = right_max[i + 1];
        right_max_idx[i] = right_max_idx[i + 1];
      }
    }
    /*
        for (int i = 0; i <= len - k; i++) {
          cout << left_max[i] << "/" << left_max_idx[i] << ", ";
        }
        cout << endl;
        for (int i = 0; i <= len - k; i++) {
          cout << right_max[i] << "/" << right_max_idx[i] << ", ";
        }
        cout << endl;
    */

    int m = 0;
    int l;
    int c;
    int r;
    for (int i = k; i <= len - 2 * k; i++) {
      const int tmp = part_sum[i] + left_max[i - k] + right_max[i + k];
      if (m < tmp) {
        m = tmp;
        l = left_max_idx[i - k];
        c = i;
        r = right_max_idx[i + k];
        //        cout << m << " => " << l << ", " << c << ", " << r << endl;
      }
    }

    return {l, c, r};
  }
};