

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board, int x, int y) {
      for (int i = 0; i < 9; i++) {
        if (i != x && board[i][y] == board[x][y]) return false;
        if (i != y && board[x][i] == board[x][y]) return false;
      }
  
      for (int i = x / 3 * 3; i < x / 3 * 3 + 3; i++) {
        for (int j = y / 3 * 3; j < y / 3 * 3 + 3; j++) {
          if ((i != x || j != y) && board[i][j] == board[x][y]) return false;
        }
      }
      return true;
    }
  
    bool solve(vector<vector<char>>& board, int i, int j) {
      if (i == 9) return true;
      if (j == 9) return solve(board, i + 1, 0);
      if (board[i][j] != '.') return solve(board, i, j + 1);
      
      for (int k = 1; k <= 9; k++) {
        board[i][j] = k + '0';
        if (isValidSudoku(board, i, j) && solve(board, i, j + 1)) return true;
        board[i][j] = '.';
      }
      
      return false;
    }
  
    void solveSudoku(vector<vector<char>>& board) {
        if (board.empty() || board.size() != 9 || board[0].size() != 9) return;
        solve(board, 0, 0);
    }
};