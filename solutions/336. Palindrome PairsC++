// Runtime: 204 ms, faster than 86.93% of C++ online submissions for Palindrome
// Pairs. Memory Usage: 49.8 MB, less than 54.56% of C++ online submissions for
// Palindrome Pairs.

class Solution {
 public:
  bool isPalindrome(const string &w) {
    int p = 0;
    int q = w.size() - 1;
    while (p < q) {
      if (w[p++] != w[q--]) return false;
    }
    return true;
  }

  vector<vector<int>> palindromePairs(vector<string> &words) {
    unordered_map<string, int> m;
    for (int i = 0; i < words.size(); i++) {
      string w = words[i];
      reverse(w.begin(), w.end());
      m[w] = i;
    }

    set<vector<int>> s;
    for (int i = 0; i < words.size(); i++) {
      const string &w = words[i];
      const int w_len = w.size();

      //      cout << "=== " << words[i] << " ====\n";

      for (int k = 0; k <= w_len; k++) {
        const string left = w.substr(0, k);
        const string right = w.substr(k, w_len - k);
        //        cout << left << " + " << right << endl;
        if (isPalindrome(left) && m.count(right) > 0 && m[right] != i) {
          s.insert({m[right], i});
        }
        if (isPalindrome(right) && m.count(left) > 0 && m[left] != i) {
          s.insert({i, m[left]});
        }
      }
    }

    return vector<vector<int>>(s.begin(), s.end());
  }
};

/*
["a","abc","aba",""]
["a",""]
["lls","s","sssll"]
["abcd","dcba","lls","s","sssll"]
["bat","tab","cat"]
*/