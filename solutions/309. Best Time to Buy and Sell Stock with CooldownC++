class Solution {
public:
    int maxProfit(vector<int>& prices) {
      if (prices.size() <= 1) return 0;
      
      vector<int> dp(prices.size());
      dp[0] = 0;
      dp[1] =  prices[0] >= prices[1]? 0 : prices[1] - prices[0];
      if (prices.size() == 2) return dp[1];
      
      for (int i = 2; i < prices.size(); i++) {
        int smallest = prices[i];
        int max_profit = dp[i - 1];
        for (int j = i - 1; j >= 0; j--) {
          if (prices[j] >= smallest) continue;
          
          smallest = prices[j];
          int t = prices[i] - smallest + (j >= 2? dp[j - 2] : 0);    
          if (t > max_profit) max_profit = t;
        }
        dp[i] = max_profit;
      }
      
      auto max_it = std::max_element(dp.begin(), dp.end());
      return *max_it;
    }
};