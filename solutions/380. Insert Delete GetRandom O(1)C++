// Runtime: 60 ms, faster than 74.10% of C++ online submissions for Insert
// Delete GetRandom O(1). Memory Usage: 22.2 MB, less than 41.27% of C++ online
// submissions for Insert Delete GetRandom O(1).

class RandomizedSet {
 public:
  unordered_map<int, int> m;  // val --> pos
  vector<int> v;              // val

  /** Initialize your data structure here. */
  RandomizedSet() {}

  /** Inserts a value to the set. Returns true if the set did not already
   * contain the specified element. */
  bool insert(int val) {
    if (m.count(val) > 0) return false;

    m[val] = v.size();
    v.push_back(val);
    return true;
  }

  /** Removes a value from the set. Returns true if the set contained the
   * specified element. */
  bool remove(int val) {
    if (m.count(val) == 0) return false;
    const int remove_pos = m[val];
    const int last_val = v.back();
    swap(v[remove_pos], v[v.size() - 1]);
    m[last_val] = remove_pos;
    m.erase(val);
    v.resize(v.size() - 1);
    return true;
  }

  /** Get a random element from the set. */
  int getRandom() { return v[random() % v.size()]; }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */