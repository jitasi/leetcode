class LRUCache {
private:
  vector<int> cache;
  unordered_map<int, int> key_to_cache_pos;
  list<int> lru; // key sorted by LRU
  int capacity;

public:
  LRUCache(int capacity) { this->capacity = capacity; }

  int get(int key) {
    if (key_to_cache_pos.find(key) == key_to_cache_pos.end())
      return -1;

    // refresh the existing key in lru
    auto it = std::find(lru.begin(), lru.end(), key);
    lru.erase(it);
    lru.push_front(key);

    return cache[key_to_cache_pos[key]];
  }

  void put(int key, int value) {
    if (key_to_cache_pos.find(key) != key_to_cache_pos.end()) {
      cache[key_to_cache_pos[key]] = value;

      // refresh the existing key in lru
      auto it = std::find(lru.begin(), lru.end(), key);
      lru.erase(it);
      lru.push_front(key);
      return;
    }

    if (key_to_cache_pos.size() < capacity) {
      key_to_cache_pos[key] = cache.size();
      cache.push_back(value);
      lru.push_front(key);
      return;
    }

    const int key_swap_out = lru.back();
    lru.pop_back();
    lru.push_front(key);

    const int pos = key_to_cache_pos[key_swap_out];
    key_to_cache_pos.erase(key_swap_out);
    key_to_cache_pos[key] = pos;
    cache[pos] = value;
  }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */