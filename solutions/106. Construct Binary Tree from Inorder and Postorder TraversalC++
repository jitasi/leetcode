// Runtime: 12 ms, faster than 96.75% of C++ online submissions for Construct Binary Tree from Inorder and Postorder Traversal.
// Memory Usage: 16.9 MB, less than 55.44% of C++ online submissions for Construct Binary Tree from Inorder and Postorder Traversal.
​
​
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder,
                     int i_l, int i_r, int p_l, int p_r) {
    if (i_l == i_r) return nullptr;
    if (i_l + 1 == i_r) return new TreeNode(inorder[i_l]);
    
    int i = i_l;
    for (; i < i_r; i++) if (inorder[i] == postorder[p_r - 1]) break;
    TreeNode* root = new TreeNode(inorder[i]);
    root->left = buildTree(inorder, postorder, i_l, i, p_l, p_l + i - i_l);
    root->right = buildTree(inorder, postorder, i + 1, i_r, p_l + i - i_l, p_r - 1);
    return root;
  }
  
  TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
    return buildTree(inorder, postorder, 0, inorder.size(), 0, postorder.size()); 
  }
};
