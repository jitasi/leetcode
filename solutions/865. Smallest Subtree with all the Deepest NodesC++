// Runtime: 8 ms, faster than 88.28% of C++ online submissions for Smallest Subtree with all the Deepest Nodes.
// Memory Usage: 15 MB, less than 58.46% of C++ online submissions for Smallest Subtree with all the Deepest Nodes.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
  TreeNode* helper(TreeNode* root, int& level) {
    if (root->left == nullptr && root->right == nullptr) {
      level = 1;
      return root;
    }
  
    int level_l;   
    TreeNode* ret_l;
    if (root->left != nullptr) {
      ret_l = helper(root->left, level_l);
      if (root->right == nullptr) {
        level = level_l + 1;
        return ret_l;
      }
    }
    
    int level_r;   
    TreeNode* ret_r;
    if (root->right != nullptr) {
      ret_r = helper(root->right, level_r);
      if (root->left == nullptr) {
        level = level_r + 1;
        return ret_r;
      }
    }
    
    if (level_l == level_r) {
      level = level_l + 1;
      return root;
    } else if (level_l > level_r) {
      level = level_l + 1;
      return ret_l;
    } else {
      level = level_r + 1;
      return ret_r;      
    }
    return nullptr;
  }
  
  TreeNode* subtreeWithAllDeepest(TreeNode* root) {
    int level;
    return helper(root, level);
  }
};