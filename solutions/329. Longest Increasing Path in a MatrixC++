// Runtime: 40 ms, faster than 91.90% of C++ online submissions for Longest Increasing Path in a Matrix.
// Memory Usage: 12.9 MB, less than 66.02% of C++ online submissions for Longest Increasing Path in a Matrix.

class Solution {
public:
  int rows;
  int cols;
  
  int longestIncreasingPath(vector<vector<int>>& matrix) {
    rows = matrix.size();
    if (rows == 0) return 0;
    cols = matrix[0].size();
    if (cols == 0) return 0;
    
    int ans = 1;
    vector<vector<int>> dp(rows, vector<int>(cols, 0));
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        ans = max(ans, dfs(i, j, matrix, dp));
      }
    }
    return ans;
  }
  
  const int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
  
  int dfs(int i, int j, vector<vector<int>>& matrix, vector<vector<int>>& dp) {
    if (dp[i][j] > 0) return dp[i][j];

    int m = 0;
    for (int k = 0; k < 4; k++) {
      const int x = i + dirs[k][0];
      const int y = j + dirs[k][1];

      if (x >= 0 && y >= 0 && x < rows && y < cols && matrix[i][j] < matrix[x][y]) {
        m = max(m, dfs(x, y, matrix, dp));
      }
    }
    dp[i][j] = m + 1;
    return dp[i][j];
  }
};