class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
      if (numerator == 0) return "0";
      
      const bool f_n = numerator > 0;
      const bool f_d = denominator > 0;
      
      if (f_n) {
        numerator = - numerator;
      }
      if (f_d) {
        denominator = -denominator;
      }
      
      string ret = (f_n ^ f_d? "-" : "" ) + 
         std::to_string(long(numerator) / denominator);
      
      long cur = long(numerator) % denominator;
      if (cur == 0) {
        return ret;
      }
      
      ret += ".";
      vector<int> ds;
      map<int, int> m;
      bool recur = false;
      int start;
      while (cur != 0) {
        m[cur] = ds.size();
        cur = cur * 10;
        ds.push_back(cur / denominator);      
        cur %= denominator;    
        
        if (m.find(cur) != m.end()) {
          start = m[cur];
          recur = true;
          break;
        }
      }
      
      for (int i = 0; i < (recur? start : ds.size()); i++)
        ret += std::to_string(ds[i]);
      if (recur) {
        ret += "(";
        for (int i = start; i < ds.size(); i++)
          ret += std::to_string(ds[i]);      
        ret += ")";
      }
      
      return ret;
    }
};