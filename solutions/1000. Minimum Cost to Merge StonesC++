// Runtime: 0 ms, faster than 100.00% of C++ online submissions for Minimum Cost
// to Merge Stones. Memory Usage: 8.9 MB, less than 41.85% of C++ online
// submissions for Minimum Cost to Merge Stones.
​ class Solution {
 public:
   int mergeStones(vector<int> &stones, int K) {
       const int len = stones.size();
       if ((len - 1) % (K - 1) != 0) return -1;
       
    vector<int> presum(len + 1);
       presum[0] = 0;
       for (int i = 0; i < len; i++) presum[i + 1] = presum[i] + stones[i];
       
    vector<vector<int>> dp(len, vector<int>(len));
       for (int l = K; l <= len; l++) {
         // merge l piles of stones
      for (int i = 0; i + l <= len; i++) {
           // the first pile is stones[i]
        const int j = i + l - 1;
           // the last pile is stones[j]
        dp[i][j] = INT_MAX;
               for (int m = i; m < j; m += K - 1)
          dp[i][j] = min(dp[i][j], dp[i][m] + dp[m + 1][j]);
                 if ((j - i) % (K - 1) == 0)
            dp[i][j] += presum[j + 1] - presum[i];
           
      }
       
    }
       return dp[0][len - 1];
  }
};
