/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
public:
    stack<pair<vector<NestedInteger> *, int>> s;
    
    NestedIterator(vector<NestedInteger> &nestedList) {
      if (nestedList.size() > 0) {
        s.push({&nestedList, 0});
        hasNext(); 
      }
    }

    int next() {
      int ret;
      auto& cur = s.top();
      if ((*cur.first)[cur.second].isInteger()) {
        ret = (*cur.first)[cur.second].getInteger();
        cur.second++;
        if (cur.second == (*cur.first).size()) {
          s.pop();
        }
      } else { // is a list
        // shouldn't come here.
      }
      hasNext();
      
      return ret;
    }

    bool hasNext() {
      if (s.empty()) return false;
      
      // Find the next
      auto& cur = s.top();
      if ((*cur.first)[cur.second].isInteger()) {
        return true;
      } else { // is a list
        auto* l = &((*cur.first)[cur.second].getList());
        cur.second++;
        if (cur.second == (*cur.first).size()) {
          s.pop();
        }
      
        if (l->size() > 0)
          s.push({l, 0});
        return hasNext();
      }
      
      // Should not reach here.
      return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */