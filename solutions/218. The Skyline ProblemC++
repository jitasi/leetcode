// Runtime: 24 ms, faster than 99.65% of C++ online submissions for The Skyline
// Problem. Memory Usage: 14.1 MB, less than 82.34% of C++ online submissions
// for The Skyline Problem.
​ class Solution {
public:
   vector<vector<int>> getSkyline(vector<vector<int>> &buildings) {
       if (buildings.empty()) return {};
       
    vector<int> pos(buildings.size() * 2);
       int i = 0;
       for (const auto b : buildings) {
           pos[i++] = b[0];
           pos[i++] = b[1];
       
    }
       std::sort(pos.begin(), pos.end());
       const auto it = std::unique(pos.begin(), pos.end());
       pos.resize(std::distance(pos.begin(), it));
       
     // highest buildings pops first.
    auto cmp = [&buildings](int a, int b) {
           return buildings[a][2] < buildings[b][2];
       
    };
       priority_queue<int, vector<int>, decltype(cmp)> pq(cmp);
       
    vector<vector<int>> ans;
       int next_building = 0;
       int last_height = 0;
       const int num_buildings = buildings.size();
       for (int i = 1; i < pos.size(); i++) {
            // insert buildings
      while (next_building < num_buildings &&
              buildings[next_building][0] < pos[i]) {
               pq.push(next_building++);
           
      }
           
       // get the highest building between pos[i-1] .. pos[i]
      int cur_building = -1;
           while (!pq.empty()) {
               cur_building = pq.top();
               if (buildings[cur_building][1] > pos[i - 1]) {
                   break;
               
        }
               pq.pop();
               cur_building = -1;
           
      }
           
       // update height
      if (cur_building != -1) {
               if (last_height != buildings[cur_building][2]) {
                   ans.push_back({pos[i - 1], buildings[cur_building][2]});
                   last_height = buildings[cur_building][2];
               
        }
           
      }
      else {
               ans.push_back({pos[i - 1], 0});
               last_height = 0;
           
      }
       
    }
       ans.push_back({pos[pos.size() - 1], 0});
       
    return ans;
  }
};
