// Runtime: 588 ms, faster than 25.71% of C++ online submissions for Word Ladder
// II.
Memory Usage: 34.8 MB, less than 55.85% of C++ online submissions for Word Ladder II.

class Solution {
public:
  bool isConnected(const string &a, const string &b) {
    int cnt = 0;
    for (int i = 0; i < a.size(); i++)
      if (a[i] == b[i])
        cnt++;
    return cnt == a.size() - 1;
  }

  void findAllPaths(const vector<string> &wordList,
                    const vector<unordered_set<int>> &conns,
                    vector<vector<string>> &ans, int target) {
    queue<vector<int>> paths;
    paths.push({wordList.size() - 1});
    vector<bool> visited(wordList.size());
    visited[wordList.size() - 1] = true;

    while (!paths.empty()) {
      vector<bool> next_visited = visited;

      const int len = paths.size();
      for (int i = 0; i < len; i++) {
        auto &path = paths.front();

        for (const int next : conns[path.back()]) {
          if (visited[next] > 0)
            continue;
          if (next == target) {
            vector<string> p(path.size() + 1);
            for (int i = 0; i < path.size(); i++)
              p[i] = wordList[path[i]];
            p.back() = wordList[target];
            ans.push_back(p);
          }

          if (!ans.empty())
            continue;

          next_visited[next] = true;

          path.push_back(next);
          paths.push(path);
          path.pop_back();
        }

        paths.pop();
      }

      if (!ans.empty())
        return;
      visited.swap(next_visited);
    }
  }

  vector<vector<string>> findLadders(string beginWord, string endWord,
                                     vector<string> &wordList) {
    wordList.push_back(beginWord);
    const int len = wordList.size();

    int target;
    vector<unordered_set<int>> conns(len + 1);
    for (int i = 0; i < len - 1; i++) {
      for (int j = i + 1; j < len; j++) {
        if (isConnected(wordList[i], wordList[j])) {
          conns[i].insert(j);
          conns[j].insert(i);
        }
      }
      if (wordList[i] == endWord)
        target = i;
    }

    vector<vector<string>> ans;
    findAllPaths(wordList, conns, ans, target);
    return ans;
  }
};