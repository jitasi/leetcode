class Solution {
 public:
  vector<vector<int>> allPathsSourceTarget(vector<vector<int>> &graph) {
    return Helper(graph, 0);
  }

  vector<vector<int>> Helper(vector<vector<int>> &graph, int idx) {
    if (idx == graph.size() - 1) return {{idx}};

    vector<vector<int>> ret;
    for (int i = 0; i < graph[idx].size(); i++) {
      vector<vector<int>> partial = Helper(graph, graph[idx][i]);

      for (auto bwd : partial) {
        vector<int> path = {idx};
        path.insert(path.end(), bwd.begin(), bwd.end());
        ret.push_back(path);
      }
    }
    return ret;
  }
};