// Runtime: 28 ms, faster than 98.31% of C++ online submissions for Subarray Sum
// Equals K. Memory Usage: 14.3 MB, less than 59.75% of C++ online submissions
// for Subarray Sum Equals K.
​ class Solution {
public:
   int subarraySum(vector<int> &nums, int k) {
       int ans = 0;
       int sum = 0;
       unordered_map<int, int> m;
      // val, count
    m[0] = 1;
       for (int right = 0; right < nums.size(); right++) {
           sum += nums[right];
           if (m.count(sum - k) > 0) ans += m[sum - k];
           m[sum]++;
       
    }
       return ans;
  }
   
  // Runtime: 1112 ms, faster than 5.06% of C++ online submissions for Subarray
  // Sum Equals K. Memory Usage: 10.2 MB, less than 88.01% of C++ online
  // submissions for Subarray Sum Equals K.
  /*    int subarraySum(vector<int>& nums, int k) {
        if (nums.size() == 0) return 0;
        
        int count = 0;
        
        vector<int> dp(nums.size());
        dp[0] = nums[0];
        if (dp[0] == k) count++;
        
        for (int i = 1; i < nums.size(); i++) {
          for (int j = 0; j < i; j++) {
            dp[j] += nums[i];
            if (dp[j] == k) count++;
          }
          dp[i] = nums[i];
          if (dp[i] == k) count++;
        }
        
        return count;
      }
  */
};
