class Solution {
 public:
  vector<int> maxSlidingWindow(vector<int> &nums, int k) {
    if (nums.empty()) return {};
    if (k == 1) return nums;

    std::deque<int> dq(k);

    // create dq with first k in nums.
    int idx = 0;
    for (; idx < k; idx++) {
      while (!dq.empty() && nums[idx] >= nums[dq.back()]) {
        dq.pop_back();
      }
      dq.push_back(idx);
    }

    vector<int> ret(nums.size() - k + 1);
    ret[0] = nums[dq.front()];
    for (; idx < nums.size(); idx++) {
      while (dq.front() <= (idx - k)) dq.pop_front();
      while (!dq.empty() && nums[idx] >= nums[dq.back()]) dq.pop_back();
      dq.push_back(idx);
      ret[idx - k + 1] = nums[dq.front()];
    }

    return ret;
  }
};