class Solution {
 public:
  bool canFinish(int numCourses, std::vector<std::vector<int>> &prerequisites) {
    if (numCourses <= 1) return true;
    vector<int> indegree(numCourses, 0);
    vector<set<int>> nexts(numCourses);

    for (const auto p : prerequisites) {
      indegree[p[0]]++;
      nexts[p[1]].insert(p[0]);
    }

    stack<int> q;
    for (int i = 0; i < indegree.size(); i++) {
      if (indegree[i] == 0) {
        q.push(i);
      }
    }
    if (q.size() == numCourses) return true;

    int cnt = 0;
    while (!q.empty()) {
      const int cur = q.top();
      q.pop();
      cnt++;
      for (const int n : nexts[cur]) {
        indegree[n]--;
        if (indegree[n] == 0) {
          q.push(n);
        }
      }
    }

    return cnt == numCourses;
  }
};