// Runtime: 152 ms, faster than 53.95% of C++ online submissions for Frog Jump.
// Memory Usage: 36.7 MB, less than 39.19% of C++ online submissions for Frog Jump.

class Solution {
public:
  bool canCross(vector<int>& stones) {
    // stone pos -> steps to this stone.
    unordered_map<int, unordered_set<int>> m;    
    for (const auto stone: stones) {
      m[stone] = {};
    }
    
    // second stone is one step after first stone.
    if (m.count(stones[0] + 1) == 0) return false;
    m[stones[0] + 1].insert(1);
    
    // from the second stone.
    for (int i = 1; i < stones.size(); i++) {
      for (const int step : m[stones[i]]) {
        int next_pos = stones[i] + step - 1;
        if (step > 1 && m.count(next_pos) > 0) m[next_pos].insert(step - 1);
        next_pos++;
        if (m.count(next_pos) > 0) m[next_pos].insert(step);
        next_pos++;
        if (m.count(next_pos) > 0) m[next_pos].insert(step + 1);
      }
    }
/*
    for (const auto kv: m) {
      cout << kv.first << ": ";
      for (const int i : kv.second)
        cout << i << ", ";
      cout << endl;
    }
*/
    return m[stones.back()].size() > 0;
  }
};