class Solution {
public:
  int maxSumAfterPartitioning(vector<int> &A, int K) {
    const int len = A.size();
    if (len <= K) {
      return len * (*max_element(A.begin(), A.end()));
    }

    // dp[i][j] : max sum from A[i] to A[j], inclusive
    int dp[len][len];
    // init
    for (int l = 0; l < K; l++) {
      for (int i = 0; i < len - l; i++) {
        const int j = i + l;
        const int m = *max_element(A.begin() + i, A.begin() + j + 1);
        dp[i][j] = (l + 1) * m;
      }
    }
    // dp
    for (int l = K; l < len; l++) {
      for (int i = 0; i < len - l; i++) {
        const int j = i + l;
        dp[i][j] = 0;
        for (int k = i; k < i + K; k++) {
          dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j]);
        }
      }
    }
    /*  for (int i = 0; i < len; i++) {
          for (int j = 0; j < len; j++) {
            cout << dp[i][j] << ", ";
          }
          cout << endl;
        }
    */
    return dp[0][len - 1];
  }
};