// Runtime: 220 ms, faster than 16.08% of C++ online submissions for Shortest Subarray with Sum at Least K.
// Memory Usage: 18.7 MB, less than 95.63% of C++ online submissions for Shortest Subarray with Sum at Least K.

class Solution {
public:
  int shortestSubarray(vector<int>& A, int K) {
    const int len = A.size();
    
    int sum[len + 1];
    sum[0] = 0;
    for (int i = 0; i < len; i++) {
      sum[i + 1] = sum[i] + A[i];
      if (sum[i + 1] < 0) sum[i + 1] = 0;
    }

    int min_len = len + 1;
    deque<int> dq;
    int p = 0;
    dq.push_back(0);
    for (int q = 1; q <= len; q++) {
      while (!dq.empty() && sum[dq.back()] >=sum[q]) dq.pop_back();
      dq.push_back(q); 

      if (sum[q] - sum[p] < K) continue;
      
      while(sum[q] - sum[dq.front()] >= K) {
        min_len = min(min_len, q - dq.front());
        dq.pop_front();
      }
    }

    return min_len <= len? min_len : -1;
  }
};