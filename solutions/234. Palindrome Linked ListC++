/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
  int getListLen(ListNode* head) {
    int count = 0;
    while (head != NULL) {
      count++;
      head = head->next;
    }
    return count;
  }
  
  ListNode* advanceN(ListNode* head, int n) {
    while (n != 0) {
      n--;
      head = head->next;
    }
    return head;
  }
  
  ListNode* reverseFirstN(ListNode* head, int n) {
    if (n == 1) {
      head->next = NULL;
      return head;
    }
    ListNode* p = head;
    ListNode* q = head->next;
    head->next = NULL;
    while (n > 1) {
      ListNode* tmp = q->next;
      q->next = p;
      p = q;
      q = tmp;
      n--;
    }  
    return p;
  }
  
  bool isPalindrome(ListNode* head) {
    if (head == nullptr) return true;
    
    const int len = getListLen(head);
    if (len <= 1) return true;
    // len = 2 .  1 2
    // len = 4,   1 2 3 4
    // p = 3->4->null
    // q = 2->1->null
    // len = 5,   1 2 3 2 1
    // p = 2->1->null
    // q = 2->1->null
    // len = 6    1 2 3 4 5 6
    
    ListNode* q = advanceN(head, (len + 1) / 2);
    ListNode* p = reverseFirstN(head, len / 2);
    while (p != NULL && q != NULL && p->val == q->val) {
      p = p->next;
      q = q->next;
    }
    // not required to recover the list.
    return p == NULL && q == NULL;
  }
};