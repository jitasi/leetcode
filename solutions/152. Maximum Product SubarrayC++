class Solution {
public:
  int maxProduct(vector<int>& nums) {
    if (nums.size() == 0) return 0;
    if (nums.size() == 1) return nums[0];

    int ans = nums[0];
    int so_far = 1;  // after last 0
    int after_first_negative = 0;
    for (int i = 0; i < nums.size(); i++) {
      if (nums[i] == 0) {
        so_far = 1;
        after_first_negative = 0;
        if (ans < 0) ans = 0;
        continue;
      } 
        
      so_far *= nums[i];
      if (so_far > ans)
        ans = so_far;
      
      if (nums[i] < 0 && after_first_negative == 0) {
        after_first_negative = 1;
        continue;
      }
      
      after_first_negative *= nums[i];
      if (after_first_negative > ans)
        ans = after_first_negative;

//      cout << so_far << ", " << after_first_negative << endl;
    }
    
    return ans;
  }
/*    
    int maxProduct(vector<int>& nums) {
      if (nums.size() == 0) return 0;
      if (nums.size() == 1) return nums[0];

      const int len = nums.size();
      cout << len << endl;
      int dp[len];
      
      for (int i = 0; i < len; i++)
        dp[i] = nums[i];
      
      int ans = nums[0];
      for (int k = 1; k < len; k++) {
        for (int i = 0; i < len - k; i++) {
          const int j = i + k;
          dp[i] = dp[i] * nums[j];
          if (dp[i] > ans) ans = dp[i];
        }
      }
      
      return ans;
    }
*/
};